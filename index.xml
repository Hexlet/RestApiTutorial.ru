<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My Hugo Site</title><link>/</link><description>Recent content on My Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Aug 2023 13:01:15 +0300</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>HTTP коды ответа</title><link>/httpstatuscodes/</link><pubDate>Fri, 04 Aug 2023 18:38:09 +0300</pubDate><guid>/httpstatuscodes/</guid><description>Коды состояний HTTP Данная страница основана на информации о кодах состояний HTTP. Оригинальными источниками являются ietf.org и Wikipedia. Кликните по заголовку категории или коду состояния для получения подробной информации.
1xx: Information В этот класс выделены коды, информирующие о процессе передачи. Это обычно предварительный ответ, состоящий только из Status-Line и опциональных заголовков, и завершается пустой строкой. Нет обязательных заголовков для этого класса кодов состояния. Из-за того, что стандарт протокола HTTP/1.0 не определял никаких 1xx кодов состояния, серверы НЕ ДОЛЖНЫ посылать 1xx ответы HTTP/1.</description></item><item><title>Источники и ресурсы</title><link>/resources/</link><pubDate>Fri, 04 Aug 2023 19:23:25 +0300</pubDate><guid>/resources/</guid><description>Ресурсы REST API Лучшие практики REST Получите Персональное руководство RESTful Best Practices от eCollege (выберете формат). Это руководство объединило мир RESTful сервисов в несколько принципов, которым легко следовать. Оно также содержит несколько решений для критических областей системы, которые позволят повысить удобство использования сервиса, уменьшить путаницу во время реализации, а так же увеличить связность.
PDF (~306KB) ePub (~46KB). Работает на iPad, iPhone, B&amp;amp;N Nook и большинстве других устройств Mobi (~86KB). Работает на Kindle, Kindle Reader Apps Исходный документ в формате Libre/Open Office (~48KB) REST Сервисы на Java RestExpress (GitHub).</description></item><item><title>HTTP методы</title><link>/lessons/httpmethods/</link><pubDate>Fri, 04 Aug 2023 13:01:15 +0300</pubDate><guid>/lessons/httpmethods/</guid><description>Использование HTTP методов для создания RESTful сервисов HTTP глаголы составляют основную часть &amp;ldquo;единого интерфейса&amp;rdquo;, ограничивающего и предоставляющего возможность осуществлять действия над существительным-ресурсом.Основными или наиболее часто используемыми HTTP глаголами (или методами, как их иногда называют) являются POST, GET, PUT, и DELETE. Они соответствуют операциям создания чтения, обновления и удаления (или в совокупности - CRUD). Есть еще и другие глаголы они используются реже. Из реже используемых методов выделяются OPTIONS и HEAD
Ниже приведена сводная таблица рекомендаций по возвращению значений при использовании основных HTTP глаголов в сочетании с ресурсами URI:</description></item><item><title>Идемпотентность</title><link>/lessons/idempotency/</link><pubDate>Fri, 04 Aug 2023 13:01:15 +0300</pubDate><guid>/lessons/idempotency/</guid><description>Что такое Идемпотентность? Скрыть/Показать Видео Идемпотентность Идемпотентность - это забавное слово, которое часто выбивает людей из колеи. Идемпотентность кажется иногда запутанной концепцией, по крайней мере, если судить по академическому определению.
С точки зрения RESTful-сервиса, операция (или вызов сервиса) идемпотентна тогда, когда клиенты могут делать один и тот же вызов неоднократно при одном и том же результате, работая как &amp;ldquo;сеттер&amp;rdquo; в языке программирования. Другими словами, создание большого количества идентичных запросов имеет такой же эффект, как и один запрос.</description></item><item><title>Именование ресурсов</title><link>/lessons/restfulresourcenaming/</link><pubDate>Fri, 04 Aug 2023 13:01:15 +0300</pubDate><guid>/lessons/restfulresourcenaming/</guid><description>Именование ресурсов Кроме правильного использования HTTP глаголов, именование ресурсов, вероятно, самая обсуждаемая и важная концепция для понимания во время создания понятного и легко используемого API для Web-сервиса. Когда ресурсы названы хорошо, API интуитивен и лёгок в использовании. Если же ресурсы названы плохо, тот же самый API может показаться неуклюжим и трудным в понимании и использовании. Ниже приведены несколько подсказок, как продолжить создавать URI ресурсов для нового API.
Фактически RESTful API - это всего лишь набор URI, HTTP вызовов к этим URI и некоторое количество представлений ресурсов в формате JSON и/или XML, многие из которых будут содержать перекрестные ссылки.</description></item><item><title>Советы по REST API</title><link>/lessons/restquicktips/</link><pubDate>Fri, 04 Aug 2023 13:01:15 +0300</pubDate><guid>/lessons/restquicktips/</guid><description>Советы по REST API Будь то RESTful или нет (в соответствии с шестью ограничениями, описанными ранее), вот несколько рекомендованных REST концепций, которые помогут построить более хорошие и удобные сервисы:
Используйте HTTP-глаголы, чтобы ваши запросы имели понятное значение Пользователи API должны иметь возможность отправлять команды GET, POST, PUT и DELETE, что значительно повышает ясность того, что делает запрос.
Как правило, четыре основных HTTP-глагола используются следующим образом:
GET Прочитать конкретный ресурс (по идентификатору) или набор ресурсов PUT Обновить конкретный ресурс (по идентификатору) или набор ресурсов.</description></item><item><title>Что такое REST?</title><link>/lessons/whatisrest/</link><pubDate>Fri, 04 Aug 2023 13:01:15 +0300</pubDate><guid>/lessons/whatisrest/</guid><description>Что такое REST? Скрыть/Показать Видео Архитектура REST описывается шестью ограничениями. Эти ограничения, применительно к архитектуре, первоначально были представлены Роем Филдингом (Roy Fielding) в его докторской диссертации и определяют основы RESTful стиля.
Шесть ограничений: Единый интерфейс (Uniform Interface) Единый интерфейс определяет интерфейс между клиентами и серверами. Это упрощает и отделяет архитектуру, которая позволяет каждой части развиваться самостоятельно. Четыре принципа единого интерфейса:
Основан на ресурсах Отдельные ресурсы определяются в запросе, для чего используется URI, как идентификаторы ресурсов.</description></item></channel></rss>